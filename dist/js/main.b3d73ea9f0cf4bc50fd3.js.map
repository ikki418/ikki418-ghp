{"version":3,"file":"js/main.b3d73ea9f0cf4bc50fd3.js","mappings":"mBAIAA,SAASC,iBAAiB,oBAAoB,WAE5C,IAAMC,EAASF,SAASG,cAAc,WAClCC,EAAcC,OAAOC,QAGzBD,OAAOJ,iBAAiB,UAAU,WAEhC,IAAMK,EAAUD,OAAOC,QACjBC,EAAkBD,EAAUF,EAClCA,EAAcE,EAGVA,EAAU,KACZJ,EAAOM,UAAUC,IAAI,YAGjBF,EACFL,EAAOM,UAAUC,IAAI,UAErBP,EAAOM,UAAUE,OAAO,YAG1BR,EAAOM,UAAUE,OAAO,YACxBR,EAAOM,UAAUE,OAAO,UAE5B,IAGA,IAAMC,EAAkB,WACLX,SAASY,iBAAiB,YAElCC,SAAQ,SAAAC,GACIA,EAAQC,wBAAwBC,IAGlCX,OAAOY,YAFD,KAGrBH,EAAQN,UAAUC,IAAI,UAE1B,GACF,EAGAE,IACAN,OAAOJ,iBAAiB,SAAUU,GAGlCX,SAASY,iBAAiB,sBAAsBC,SAAQ,SAAAK,GACtDA,EAAQV,UAAUC,IAAI,UACxB,IAGAT,SAASY,iBAAiB,gBAAgBC,SAAQ,SAAAM,GAChDA,EAAOlB,iBAAiB,SAAS,SAAUmB,GACzCA,EAAEC,iBAEF,IAAMC,EAAWC,KAAKC,aAAa,QACnC,GAAiB,MAAbF,EAAJ,CAEA,IAAMG,EAAgBzB,SAASG,cAAcmB,GAC7C,GAAKG,EAAL,CAEA,IACMC,EADiBD,EAAcV,wBAAwBC,IAAMX,OAAOC,QAClC,IAExCD,OAAOsB,SAAS,CACdX,IAAKU,EACLE,SAAU,UAPc,CAHE,CAY9B,GACF,GACF,G","sources":["webpack://ikki418-ghp/./src/js/index.js"],"sourcesContent":["// SCSSをインポート（Webpackがビルドプロセスで処理）\nimport '../scss/main.scss';\n\n// DOM読み込み完了後に実行\ndocument.addEventListener('DOMContentLoaded', () => {\n  // ヘッダースクロール制御\n  const header = document.querySelector('.header');\n  let lastScrollY = window.scrollY;\n  \n  // スクロール時のヘッダー表示/非表示\n  window.addEventListener('scroll', () => {\n    // スクロール方向を検出\n    const scrollY = window.scrollY;\n    const isScrollingDown = scrollY > lastScrollY;\n    lastScrollY = scrollY;\n    \n    // スクロール量に応じてヘッダースタイルを変更\n    if (scrollY > 100) {\n      header.classList.add('scrolled');\n      \n      // スクロール方向に応じてヘッダーを表示/非表示\n      if (isScrollingDown) {\n        header.classList.add('hidden');\n      } else {\n        header.classList.remove('hidden');\n      }\n    } else {\n      header.classList.remove('scrolled');\n      header.classList.remove('hidden');\n    }\n  });\n  \n  // スクロールアニメーション\n  const animateOnScroll = () => {\n    const elements = document.querySelectorAll('.fade-in');\n    \n    elements.forEach(element => {\n      const elementTop = element.getBoundingClientRect().top;\n      const elementVisible = 150;\n      \n      if (elementTop < window.innerHeight - elementVisible) {\n        element.classList.add('visible');\n      }\n    });\n  };\n  \n  // 初期表示時にもアニメーションを適用\n  animateOnScroll();\n  window.addEventListener('scroll', animateOnScroll);\n  \n  // セクション要素にフェードインクラスを追加\n  document.querySelectorAll('section:not(.hero)').forEach(section => {\n    section.classList.add('fade-in');\n  });\n  \n  // ナビゲーションリンクのスムーススクロール\n  document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function (e) {\n      e.preventDefault();\n      \n      const targetId = this.getAttribute('href');\n      if (targetId === '#') return;\n      \n      const targetElement = document.querySelector(targetId);\n      if (!targetElement) return;\n      \n      const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;\n      const offsetPosition = targetPosition - 100; // ヘッダー分のオフセット\n      \n      window.scrollTo({\n        top: offsetPosition,\n        behavior: 'smooth'\n      });\n    });\n  });\n});\n"],"names":["document","addEventListener","header","querySelector","lastScrollY","window","scrollY","isScrollingDown","classList","add","remove","animateOnScroll","querySelectorAll","forEach","element","getBoundingClientRect","top","innerHeight","section","anchor","e","preventDefault","targetId","this","getAttribute","targetElement","offsetPosition","scrollTo","behavior"],"sourceRoot":""}